# -*- coding: utf-8 -*-
"""
    DataGenerator: Exceptions
"""


class NoInputFile(Exception):
    """No Input file found."""
    pass


class JsonError(Exception):
    pass


class GeneralError(Exception):
    """Some kind of general error with the GenData."""
    pass


class SwMatchError(Exception):
    """Raised when an operation specifies an expected."""

    def __init__(self, sw_actual: str, sw_expected: str, rs=None):
        """
        Args:
                sw_actual : the SW we actually received from the card (4 hex digits)
                sw_expected : the SW we expected to receive from the card (4 hex digits)
                rs : interpreter class to convert SW to string
        """

        self.sw_actual = sw_actual
        self.sw_expected = sw_expected
        self.rs = rs

    def __str__(self):
        if self.rs and self.rs.lchan[0]:
            r = self.rs.lchan[0].interpret_sw(self.sw_actual)
            if r:
                return "SW match failed! Expected %s and got %s: %s - %s" % (
                    self.sw_expected, self.sw_actual, r[0], r[1])
        return "SW match failed! Expected %s and got %s." % (self.sw_expected, self.sw_actual)


class TankError(Exception):
    pass

# class Tank:
#     def __init__(self, capacity):
#         self.capacity = capacity
#         self.__level = 0
#
#     @property
#     def level(self):
#         return self.__level
#
#     @level.setter
#     def level(self, amount):
#         if amount > 0:
#             # fueling
#             if amount <= self.capacity:
#                 self.__level = amount
#             else:
#                 raise TankError('Too much liquid in the tank')
#         elif amount < 0:
#             raise TankError('Not possible to set negative liquid level')
#
#     @level.deleter
#     def level(self):
#         if self.__level > 0:
#             print('It is good to remember to sanitize the remains from the tank!')
#         self.__level = None
#
# # our_tank object has a capacity of 20 units
# our_tank = Tank(20)
# # our_tank's current liquid level is set to 10 units
# our_tank.level = 10
#
# our_tank.__level=1
#
# print('Current liquid level:', our_tank.level)
#
# # adding additional 3 units (setting liquid level to 13)
# our_tank.level += 3
# print('Current liquid level:', our_tank.level)
#
# # let's try to set the current level to 21 units
# # this should be rejected as the tank's capacity is 20 units
# try:
#     our_tank.level = 21
# except TankError as e:
#     print('Trying to set liquid level to 21 units, result:', e)
#
# # similar example - let's try to add an additional 15 units
# # this should be rejected as the total capacity is 20 units
# try:
#     our_tank.level += 15
# except TankError as e:
#     print('Trying to add an additional 15 units, result:', e)
#
# # let's try to set the liquid level to a negative amount
# # this should be rejected as it is senseless
# try:
#     our_tank.level = -3
# except TankError as e:
#     print('Trying to set liquid level to -3 units, result:', e)
#
# print('Current liquid level:', our_tank.level)
#
